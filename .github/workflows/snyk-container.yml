name: Snyk Container

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '34 12 * * 3'

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build a Docker image
      run: docker build -t your/image-to-test .

    - name: Run Snyk to check Docker image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: your/image-to-test
        args: --file=Dockerfile --sarif-file-output=snyk.sarif

    - name: Sanitize SARIF with jq
      run: |
        jq '
          # 1) Map string severities in results to numbers
          (.runs[].results[]? |
            if .level == "low" then .level = 1
            elif .level == "medium" then .level = 2
            elif .level == "high" then .level = 3
            elif .level == "critical" then .level = 4
            elif (.level == null or .level == "undefined") then .level = 2
            else . end
          ) |

          # 2) Asegurar que .severity (si existe) sea numÃ©rico
          (.runs[].results[]? |
            if .severity == null or .severity == "undefined" then .severity = 2 else . end
          ) |

          # 3) Limpiar el campo security-severity en las reglas
          (.runs[].tool.driver.rules[]? |
            if (.properties["security-severity"] == null) or (.properties["security-severity"] == "undefined") then
              .properties["security-severity"] = "0"
            else
              .
            end
          )
        ' snyk.sarif > snyk.fixed.sarif \
        && mv snyk.fixed.sarif snyk.sarif

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

